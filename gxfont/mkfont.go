// Copyright 2015 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build ignore

// Small program to generate roboto_regular.go.
//
// TODO(crawshaw): italics, bold, and find a fixed-width font.
package main

import (
	"bytes"
	"compress/flate"
	"fmt"
	"go/format"
	"io/ioutil"
	"log"
	"net/http"
	"os"
)

const url = "https://github.com/google/fonts/raw/master/apache/roboto/Roboto-Regular.ttf"

func main() {
	resp, err := http.Get(url)
	if err != nil {
		log.Fatal(err)
	}
	defer resp.Body.Close()
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		log.Fatalf("error reading %q: %v", url, err)
	}
	data, err = deflate(data)
	if err != nil {
		log.Fatalf("error deflating %q: %v", url, err)
	}

	w := new(bytes.Buffer)
	fmt.Fprint(w, header)
	fmt.Fprint(w, "var robotoRegular = []byte{\n")

	for len(data) > 0 {
		n := 16
		if n > len(data) {
			n = len(data)
		}
		for _, c := range data[:n] {
			fmt.Fprintf(w, "0x%02x,", c)
		}
		fmt.Fprintf(w, "\n")
		data = data[n:]
	}

	fmt.Fprint(w, "}")
	wbytes := w.Bytes()

	b, err := format.Source(wbytes)
	if err != nil {
		os.Stderr.Write(wbytes)
		log.Fatalf("error formatting: %v", err)
	}

	f, err := os.Create("roboto_regular.go")
	if err != nil {
		log.Fatal(err)
	}
	if _, err := f.Write(b); err != nil {
		log.Fatal(err)
	}
	if err := f.Close(); err != nil {
		log.Fatal(err)
	}
}

const header = `// GENERATED BY mkfont.go

package gxfont

import (
	"bytes"
	"compress/flate"
	"io/ioutil"
)

func init() {
	r := bytes.NewReader(robotoRegular)
	b, err := ioutil.ReadAll(flate.NewReader(r))
	if err != nil {
		panic(err)
	}
	Default = b
}

`

func deflate(src []byte) (dst []byte, err error) {
	buf := new(bytes.Buffer)
	w, err := flate.NewWriter(buf, flate.DefaultCompression)
	if err != nil {
		return nil, err
	}
	if _, err := w.Write(src); err != nil {
		return nil, err
	}
	if err := w.Close(); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
